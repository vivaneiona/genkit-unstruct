// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"log/slog"

	mock "github.com/stretchr/testify/mock"
	"github.com/vivaneiona/genkit-unstruct"
)

// NewMockAsset creates a new instance of MockAsset. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAsset(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAsset {
	mock := &MockAsset{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAsset is an autogenerated mock type for the Asset type
type MockAsset struct {
	mock.Mock
}

type MockAsset_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAsset) EXPECT() *MockAsset_Expecter {
	return &MockAsset_Expecter{mock: &_m.Mock}
}

// CreateMessages provides a mock function for the type MockAsset
func (_mock *MockAsset) CreateMessages(ctx context.Context, log *slog.Logger) ([]*unstruct.Message, error) {
	ret := _mock.Called(ctx, log)

	if len(ret) == 0 {
		panic("no return value specified for CreateMessages")
	}

	var r0 []*unstruct.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *slog.Logger) ([]*unstruct.Message, error)); ok {
		return returnFunc(ctx, log)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *slog.Logger) []*unstruct.Message); ok {
		r0 = returnFunc(ctx, log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*unstruct.Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *slog.Logger) error); ok {
		r1 = returnFunc(ctx, log)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAsset_CreateMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMessages'
type MockAsset_CreateMessages_Call struct {
	*mock.Call
}

// CreateMessages is a helper method to define mock.On call
//   - ctx context.Context
//   - log *slog.Logger
func (_e *MockAsset_Expecter) CreateMessages(ctx interface{}, log interface{}) *MockAsset_CreateMessages_Call {
	return &MockAsset_CreateMessages_Call{Call: _e.mock.On("CreateMessages", ctx, log)}
}

func (_c *MockAsset_CreateMessages_Call) Run(run func(ctx context.Context, log *slog.Logger)) *MockAsset_CreateMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *slog.Logger
		if args[1] != nil {
			arg1 = args[1].(*slog.Logger)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAsset_CreateMessages_Call) Return(messages []*unstruct.Message, err error) *MockAsset_CreateMessages_Call {
	_c.Call.Return(messages, err)
	return _c
}

func (_c *MockAsset_CreateMessages_Call) RunAndReturn(run func(ctx context.Context, log *slog.Logger) ([]*unstruct.Message, error)) *MockAsset_CreateMessages_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDryRunner creates a new instance of MockDryRunner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDryRunner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDryRunner {
	mock := &MockDryRunner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDryRunner is an autogenerated mock type for the DryRunner type
type MockDryRunner struct {
	mock.Mock
}

type MockDryRunner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDryRunner) EXPECT() *MockDryRunner_Expecter {
	return &MockDryRunner_Expecter{mock: &_m.Mock}
}

// DryRun provides a mock function for the type MockDryRunner
func (_mock *MockDryRunner) DryRun(ctx context.Context, assets []unstruct.Asset, optFns ...func(*unstruct.Options)) (*unstruct.ExecutionStats, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, assets, optFns)
	} else {
		tmpRet = _mock.Called(ctx, assets)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DryRun")
	}

	var r0 *unstruct.ExecutionStats
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []unstruct.Asset, ...func(*unstruct.Options)) (*unstruct.ExecutionStats, error)); ok {
		return returnFunc(ctx, assets, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []unstruct.Asset, ...func(*unstruct.Options)) *unstruct.ExecutionStats); ok {
		r0 = returnFunc(ctx, assets, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstruct.ExecutionStats)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []unstruct.Asset, ...func(*unstruct.Options)) error); ok {
		r1 = returnFunc(ctx, assets, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDryRunner_DryRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DryRun'
type MockDryRunner_DryRun_Call struct {
	*mock.Call
}

// DryRun is a helper method to define mock.On call
//   - ctx context.Context
//   - assets []unstruct.Asset
//   - optFns ...func(*unstruct.Options)
func (_e *MockDryRunner_Expecter) DryRun(ctx interface{}, assets interface{}, optFns ...interface{}) *MockDryRunner_DryRun_Call {
	return &MockDryRunner_DryRun_Call{Call: _e.mock.On("DryRun",
		append([]interface{}{ctx, assets}, optFns...)...)}
}

func (_c *MockDryRunner_DryRun_Call) Run(run func(ctx context.Context, assets []unstruct.Asset, optFns ...func(*unstruct.Options))) *MockDryRunner_DryRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []unstruct.Asset
		if args[1] != nil {
			arg1 = args[1].([]unstruct.Asset)
		}
		var arg2 []func(*unstruct.Options)
		var variadicArgs []func(*unstruct.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*unstruct.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDryRunner_DryRun_Call) Return(executionStats *unstruct.ExecutionStats, err error) *MockDryRunner_DryRun_Call {
	_c.Call.Return(executionStats, err)
	return _c
}

func (_c *MockDryRunner_DryRun_Call) RunAndReturn(run func(ctx context.Context, assets []unstruct.Asset, optFns ...func(*unstruct.Options)) (*unstruct.ExecutionStats, error)) *MockDryRunner_DryRun_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRunner creates a new instance of MockRunner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRunner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRunner {
	mock := &MockRunner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRunner is an autogenerated mock type for the Runner type
type MockRunner struct {
	mock.Mock
}

type MockRunner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRunner) EXPECT() *MockRunner_Expecter {
	return &MockRunner_Expecter{mock: &_m.Mock}
}

// Go provides a mock function for the type MockRunner
func (_mock *MockRunner) Go(fn func() error) {
	_mock.Called(fn)
	return
}

// MockRunner_Go_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Go'
type MockRunner_Go_Call struct {
	*mock.Call
}

// Go is a helper method to define mock.On call
//   - fn func() error
func (_e *MockRunner_Expecter) Go(fn interface{}) *MockRunner_Go_Call {
	return &MockRunner_Go_Call{Call: _e.mock.On("Go", fn)}
}

func (_c *MockRunner_Go_Call) Run(run func(fn func() error)) *MockRunner_Go_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 func() error
		if args[0] != nil {
			arg0 = args[0].(func() error)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRunner_Go_Call) Return() *MockRunner_Go_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRunner_Go_Call) RunAndReturn(run func(fn func() error)) *MockRunner_Go_Call {
	_c.Run(run)
	return _c
}

// Wait provides a mock function for the type MockRunner
func (_mock *MockRunner) Wait() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Wait")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRunner_Wait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wait'
type MockRunner_Wait_Call struct {
	*mock.Call
}

// Wait is a helper method to define mock.On call
func (_e *MockRunner_Expecter) Wait() *MockRunner_Wait_Call {
	return &MockRunner_Wait_Call{Call: _e.mock.On("Wait")}
}

func (_c *MockRunner_Wait_Call) Run(run func()) *MockRunner_Wait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRunner_Wait_Call) Return(err error) *MockRunner_Wait_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRunner_Wait_Call) RunAndReturn(run func() error) *MockRunner_Wait_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPromptProvider creates a new instance of MockPromptProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPromptProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPromptProvider {
	mock := &MockPromptProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPromptProvider is an autogenerated mock type for the PromptProvider type
type MockPromptProvider struct {
	mock.Mock
}

type MockPromptProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPromptProvider) EXPECT() *MockPromptProvider_Expecter {
	return &MockPromptProvider_Expecter{mock: &_m.Mock}
}

// GetPrompt provides a mock function for the type MockPromptProvider
func (_mock *MockPromptProvider) GetPrompt(tag string, version int) (string, error) {
	ret := _mock.Called(tag, version)

	if len(ret) == 0 {
		panic("no return value specified for GetPrompt")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int) (string, error)); ok {
		return returnFunc(tag, version)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int) string); ok {
		r0 = returnFunc(tag, version)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = returnFunc(tag, version)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPromptProvider_GetPrompt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrompt'
type MockPromptProvider_GetPrompt_Call struct {
	*mock.Call
}

// GetPrompt is a helper method to define mock.On call
//   - tag string
//   - version int
func (_e *MockPromptProvider_Expecter) GetPrompt(tag interface{}, version interface{}) *MockPromptProvider_GetPrompt_Call {
	return &MockPromptProvider_GetPrompt_Call{Call: _e.mock.On("GetPrompt", tag, version)}
}

func (_c *MockPromptProvider_GetPrompt_Call) Run(run func(tag string, version int)) *MockPromptProvider_GetPrompt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPromptProvider_GetPrompt_Call) Return(s string, err error) *MockPromptProvider_GetPrompt_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockPromptProvider_GetPrompt_Call) RunAndReturn(run func(tag string, version int) (string, error)) *MockPromptProvider_GetPrompt_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockContextualPromptProvider creates a new instance of MockContextualPromptProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContextualPromptProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContextualPromptProvider {
	mock := &MockContextualPromptProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockContextualPromptProvider is an autogenerated mock type for the ContextualPromptProvider type
type MockContextualPromptProvider struct {
	mock.Mock
}

type MockContextualPromptProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContextualPromptProvider) EXPECT() *MockContextualPromptProvider_Expecter {
	return &MockContextualPromptProvider_Expecter{mock: &_m.Mock}
}

// GetPrompt provides a mock function for the type MockContextualPromptProvider
func (_mock *MockContextualPromptProvider) GetPrompt(tag string, version int) (string, error) {
	ret := _mock.Called(tag, version)

	if len(ret) == 0 {
		panic("no return value specified for GetPrompt")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int) (string, error)); ok {
		return returnFunc(tag, version)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int) string); ok {
		r0 = returnFunc(tag, version)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = returnFunc(tag, version)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContextualPromptProvider_GetPrompt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrompt'
type MockContextualPromptProvider_GetPrompt_Call struct {
	*mock.Call
}

// GetPrompt is a helper method to define mock.On call
//   - tag string
//   - version int
func (_e *MockContextualPromptProvider_Expecter) GetPrompt(tag interface{}, version interface{}) *MockContextualPromptProvider_GetPrompt_Call {
	return &MockContextualPromptProvider_GetPrompt_Call{Call: _e.mock.On("GetPrompt", tag, version)}
}

func (_c *MockContextualPromptProvider_GetPrompt_Call) Run(run func(tag string, version int)) *MockContextualPromptProvider_GetPrompt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockContextualPromptProvider_GetPrompt_Call) Return(s string, err error) *MockContextualPromptProvider_GetPrompt_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockContextualPromptProvider_GetPrompt_Call) RunAndReturn(run func(tag string, version int) (string, error)) *MockContextualPromptProvider_GetPrompt_Call {
	_c.Call.Return(run)
	return _c
}

// GetPromptWithContext provides a mock function for the type MockContextualPromptProvider
func (_mock *MockContextualPromptProvider) GetPromptWithContext(tag string, version int, keys []string, document string) (string, error) {
	ret := _mock.Called(tag, version, keys, document)

	if len(ret) == 0 {
		panic("no return value specified for GetPromptWithContext")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int, []string, string) (string, error)); ok {
		return returnFunc(tag, version, keys, document)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int, []string, string) string); ok {
		r0 = returnFunc(tag, version, keys, document)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, int, []string, string) error); ok {
		r1 = returnFunc(tag, version, keys, document)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContextualPromptProvider_GetPromptWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPromptWithContext'
type MockContextualPromptProvider_GetPromptWithContext_Call struct {
	*mock.Call
}

// GetPromptWithContext is a helper method to define mock.On call
//   - tag string
//   - version int
//   - keys []string
//   - document string
func (_e *MockContextualPromptProvider_Expecter) GetPromptWithContext(tag interface{}, version interface{}, keys interface{}, document interface{}) *MockContextualPromptProvider_GetPromptWithContext_Call {
	return &MockContextualPromptProvider_GetPromptWithContext_Call{Call: _e.mock.On("GetPromptWithContext", tag, version, keys, document)}
}

func (_c *MockContextualPromptProvider_GetPromptWithContext_Call) Run(run func(tag string, version int, keys []string, document string)) *MockContextualPromptProvider_GetPromptWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockContextualPromptProvider_GetPromptWithContext_Call) Return(s string, err error) *MockContextualPromptProvider_GetPromptWithContext_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockContextualPromptProvider_GetPromptWithContext_Call) RunAndReturn(run func(tag string, version int, keys []string, document string) (string, error)) *MockContextualPromptProvider_GetPromptWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInvoker creates a new instance of MockInvoker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInvoker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInvoker {
	mock := &MockInvoker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockInvoker is an autogenerated mock type for the Invoker type
type MockInvoker struct {
	mock.Mock
}

type MockInvoker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInvoker) EXPECT() *MockInvoker_Expecter {
	return &MockInvoker_Expecter{mock: &_m.Mock}
}

// Generate provides a mock function for the type MockInvoker
func (_mock *MockInvoker) Generate(ctx context.Context, model unstruct.Model, prompt string, media []*unstruct.Part) ([]byte, error) {
	ret := _mock.Called(ctx, model, prompt, media)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, unstruct.Model, string, []*unstruct.Part) ([]byte, error)); ok {
		return returnFunc(ctx, model, prompt, media)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, unstruct.Model, string, []*unstruct.Part) []byte); ok {
		r0 = returnFunc(ctx, model, prompt, media)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, unstruct.Model, string, []*unstruct.Part) error); ok {
		r1 = returnFunc(ctx, model, prompt, media)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockInvoker_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type MockInvoker_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//   - ctx context.Context
//   - model unstruct.Model
//   - prompt string
//   - media []*unstruct.Part
func (_e *MockInvoker_Expecter) Generate(ctx interface{}, model interface{}, prompt interface{}, media interface{}) *MockInvoker_Generate_Call {
	return &MockInvoker_Generate_Call{Call: _e.mock.On("Generate", ctx, model, prompt, media)}
}

func (_c *MockInvoker_Generate_Call) Run(run func(ctx context.Context, model unstruct.Model, prompt string, media []*unstruct.Part)) *MockInvoker_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 unstruct.Model
		if args[1] != nil {
			arg1 = args[1].(unstruct.Model)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []*unstruct.Part
		if args[3] != nil {
			arg3 = args[3].([]*unstruct.Part)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockInvoker_Generate_Call) Return(bytes []byte, err error) *MockInvoker_Generate_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockInvoker_Generate_Call) RunAndReturn(run func(ctx context.Context, model unstruct.Model, prompt string, media []*unstruct.Part) ([]byte, error)) *MockInvoker_Generate_Call {
	_c.Call.Return(run)
	return _c
}
